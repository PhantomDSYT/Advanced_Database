// <auto-generated />
using System;
using AD_DB_Project.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AD_DB_Project.Migrations
{
    [DbContext(typeof(AD_DB_ProjectContext))]
    [Migration("20221030205735_AddingIdentity")]
    partial class AddingIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AD_DB_Project.Models.Airplane", b =>
                {
                    b.Property<int>("RegNum")
                        .HasColumnName("reg_num")
                        .HasColumnType("int");

                    b.Property<string>("AirportCode")
                        .HasColumnName("airport_code")
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("Company")
                        .HasColumnName("company")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Model")
                        .HasColumnName("model")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("RegNum")
                        .HasName("PK_RN");

                    b.HasIndex("AirportCode");

                    b.ToTable("AIRPLANE");
                });

            modelBuilder.Entity("AD_DB_Project.Models.Airport", b =>
                {
                    b.Property<string>("AirportCode")
                        .HasColumnName("airport_code")
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("AirportCity")
                        .HasColumnName("airport_city")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("AirportName")
                        .HasColumnName("airport_name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("AirportState")
                        .HasColumnName("airport_state")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.HasKey("AirportCode")
                        .HasName("PK_AC");

                    b.ToTable("AIRPORT");
                });

            modelBuilder.Entity("AD_DB_Project.Models.Category", b =>
                {
                    b.Property<string>("UMembership")
                        .HasColumnName("u_membership")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("Trn")
                        .HasColumnName("trn")
                        .HasColumnType("int");

                    b.HasKey("UMembership", "Trn")
                        .HasName("PK_Category");

                    b.HasIndex("Trn");

                    b.ToTable("CATEGORY");
                });

            modelBuilder.Entity("AD_DB_Project.Models.Employee", b =>
                {
                    b.Property<int>("Trn")
                        .HasColumnName("trn")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("FName")
                        .HasColumnName("f_name")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("LName")
                        .HasColumnName("l_name")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("MName")
                        .HasColumnName("m_name")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<decimal?>("Salary")
                        .HasColumnName("salary")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<long?>("Tel")
                        .HasColumnName("tel")
                        .HasColumnType("bigint");

                    b.HasKey("Trn")
                        .HasName("PK_TRN");

                    b.ToTable("EMPLOYEE");
                });

            modelBuilder.Entity("AD_DB_Project.Models.EmployeeAudit", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("AuditAction")
                        .HasColumnName("audit_action")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AuditDate")
                        .HasColumnName("audit_date")
                        .HasColumnType("date");

                    b.Property<string>("FName")
                        .HasColumnName("f_name")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("LName")
                        .HasColumnName("l_name")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("MName")
                        .HasColumnName("m_name")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<decimal?>("Salary")
                        .HasColumnName("salary")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<long?>("Tel")
                        .HasColumnName("tel")
                        .HasColumnType("bigint");

                    b.Property<int>("Trn")
                        .HasColumnName("trn")
                        .HasColumnType("int");

                    b.ToTable("Employee_Audit");
                });

            modelBuilder.Entity("AD_DB_Project.Models.Supervisor", b =>
                {
                    b.Property<int>("Trn")
                        .HasColumnName("trn")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnName("start")
                        .HasColumnType("date");

                    b.Property<int>("Employee")
                        .HasColumnName("employee")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.HasKey("Trn", "Start", "Employee")
                        .HasName("PK_sup_trn");

                    b.ToTable("SUPERVISOR");
                });

            modelBuilder.Entity("AD_DB_Project.Models.Technician", b =>
                {
                    b.Property<int>("Trn")
                        .HasColumnName("trn")
                        .HasColumnType("int");

                    b.Property<string>("Expertise")
                        .HasColumnName("expertise")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Restriction")
                        .HasColumnName("restriction")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Trn")
                        .HasName("PK_TechTrn");

                    b.ToTable("TECHNICIAN");
                });

            modelBuilder.Entity("AD_DB_Project.Models.Test", b =>
                {
                    b.Property<int>("FaaNum")
                        .HasColumnName("faa_num")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnName("date")
                        .HasColumnType("date");

                    b.Property<int?>("MaxScore")
                        .HasColumnName("max_score")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<int?>("RegNum")
                        .HasColumnName("reg_num")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnName("score")
                        .HasColumnType("int");

                    b.Property<int?>("TestHours")
                        .HasColumnName("test_hours")
                        .HasColumnType("int");

                    b.HasKey("FaaNum")
                        .HasName("PK_FN");

                    b.HasIndex("RegNum");

                    b.ToTable("TEST");
                });

            modelBuilder.Entity("AD_DB_Project.Models.TestAudit", b =>
                {
                    b.Property<string>("AuditAction")
                        .HasColumnName("audit_action")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AuditDate")
                        .HasColumnName("audit_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Date")
                        .HasColumnName("date")
                        .HasColumnType("date");

                    b.Property<int>("FaaNum")
                        .HasColumnName("faa_num")
                        .HasColumnType("int");

                    b.Property<int?>("MaxScore")
                        .HasColumnName("max_score")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<int?>("RegNum")
                        .HasColumnName("reg_num")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnName("score")
                        .HasColumnType("int");

                    b.Property<int?>("TestHours")
                        .HasColumnName("test_hours")
                        .HasColumnType("int");

                    b.ToTable("Test_Audit");
                });

            modelBuilder.Entity("AD_DB_Project.Models.TrafficController", b =>
                {
                    b.Property<int>("Trn")
                        .HasColumnName("trn")
                        .HasColumnType("int");

                    b.Property<DateTime>("Exam")
                        .HasColumnName("exam")
                        .HasColumnType("date");

                    b.HasKey("Trn")
                        .HasName("PK_TrafficTrn");

                    b.ToTable("Traffic_Controller");
                });

            modelBuilder.Entity("AD_DB_Project.Models.WorkStaff", b =>
                {
                    b.Property<string>("AirportCode")
                        .HasColumnName("airport_code")
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<int>("Trn")
                        .HasColumnName("trn")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.HasKey("AirportCode", "Trn", "StartDate")
                        .HasName("PK_Staff");

                    b.HasIndex("Trn");

                    b.ToTable("Work_Staff");
                });

            modelBuilder.Entity("AD_DB_Project.Models.WorkerUnion", b =>
                {
                    b.Property<string>("UMembership")
                        .HasColumnName("u_membership")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("UName")
                        .HasColumnName("u_name")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<int?>("UPresident")
                        .HasColumnName("u_president")
                        .HasColumnType("int");

                    b.HasKey("UMembership")
                        .HasName("PK_member");

                    b.HasIndex("UPresident");

                    b.ToTable("WORKER_UNION");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AD_DB_Project.Models.Airplane", b =>
                {
                    b.HasOne("AD_DB_Project.Models.Airport", "AirportCodeNavigation")
                        .WithMany("Airplane")
                        .HasForeignKey("AirportCode")
                        .HasConstraintName("FK_AirPort");
                });

            modelBuilder.Entity("AD_DB_Project.Models.Category", b =>
                {
                    b.HasOne("AD_DB_Project.Models.Employee", "TrnNavigation")
                        .WithMany("Category")
                        .HasForeignKey("Trn")
                        .HasConstraintName("FK_memberTrn")
                        .IsRequired();

                    b.HasOne("AD_DB_Project.Models.WorkerUnion", "UMembershipNavigation")
                        .WithMany("Category")
                        .HasForeignKey("UMembership")
                        .HasConstraintName("FK_member")
                        .IsRequired();
                });

            modelBuilder.Entity("AD_DB_Project.Models.Supervisor", b =>
                {
                    b.HasOne("AD_DB_Project.Models.Employee", "TrnNavigation")
                        .WithMany("Supervisor")
                        .HasForeignKey("Trn")
                        .HasConstraintName("FK_empnum")
                        .IsRequired();
                });

            modelBuilder.Entity("AD_DB_Project.Models.Technician", b =>
                {
                    b.HasOne("AD_DB_Project.Models.Employee", "TrnNavigation")
                        .WithOne("Technician")
                        .HasForeignKey("AD_DB_Project.Models.Technician", "Trn")
                        .HasConstraintName("FK_TechTrn")
                        .IsRequired();
                });

            modelBuilder.Entity("AD_DB_Project.Models.Test", b =>
                {
                    b.HasOne("AD_DB_Project.Models.Airplane", "RegNumNavigation")
                        .WithMany("Test")
                        .HasForeignKey("RegNum")
                        .HasConstraintName("FK_RN");
                });

            modelBuilder.Entity("AD_DB_Project.Models.TrafficController", b =>
                {
                    b.HasOne("AD_DB_Project.Models.Employee", "TrnNavigation")
                        .WithOne("TrafficController")
                        .HasForeignKey("AD_DB_Project.Models.TrafficController", "Trn")
                        .HasConstraintName("FK_TrafficTrn")
                        .IsRequired();
                });

            modelBuilder.Entity("AD_DB_Project.Models.WorkStaff", b =>
                {
                    b.HasOne("AD_DB_Project.Models.Airport", "AirportCodeNavigation")
                        .WithMany("WorkStaff")
                        .HasForeignKey("AirportCode")
                        .HasConstraintName("FK_AC")
                        .IsRequired();

                    b.HasOne("AD_DB_Project.Models.Employee", "TrnNavigation")
                        .WithMany("WorkStaff")
                        .HasForeignKey("Trn")
                        .HasConstraintName("FK_TRN")
                        .IsRequired();
                });

            modelBuilder.Entity("AD_DB_Project.Models.WorkerUnion", b =>
                {
                    b.HasOne("AD_DB_Project.Models.Employee", "UPresidentNavigation")
                        .WithMany("WorkerUnion")
                        .HasForeignKey("UPresident")
                        .HasConstraintName("FK_Pres");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
